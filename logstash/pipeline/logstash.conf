input {
  beats {
    port => 5044
    tags => ["from_filebeat"]
  }

  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["direct_nginx"]
  }

  tcp {
    port => 5000
    codec => "line"
    tags => ["custom_tcp"]
  }

  udp {
    port => 5140
    codec => "line"
    tags => ["custom_udp"]
  }
}

filter {
  # Обработка данных от Filebeat (nginx)
  if [fileset][module] == "nginx" and [fileset][name] == "access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      remove_field => ["message"]
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }
  }
  # Обработка прямого сбора nginx
  else if "direct_nginx" in [tags] {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      remove_field => ["message"]
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }
  }
  # Обработка ручных TCP/UDP сообщений
  else if "custom_udp" in [tags] or "custom_tcp" in [tags] {
    grok {
      match => { 
        "message" => [
          "%{IP:client_ip} %{WORD:status} +%{NUMBER:port}",
          "%{IP:client_ip} %{WORD:status} %{NUMBER:port}"
        ]
      }
      break_on_match => true
      add_tag => ["processed_custom"]
      remove_tag => ["_grokparsefailure"]
    }
    
    if "_grokparsefailure" not in [tags] {
      mutate {
        add_field => { "source_type" => "custom_input" }
        convert => { "port" => "integer" }
      }
    }
  }
}

output {
  stdout { 
    codec => rubydebug 
  }

  if "from_filebeat" in [tags] or "direct_nginx" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "nginx-%{+YYYY.MM.dd}"
    }
  }
  
  if "processed_custom" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "custom-%{+YYYY.MM.dd}"
      document_id => "%{client_ip}-%{status}-%{port}"
    }
  }
}